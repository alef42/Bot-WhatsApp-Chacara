const { Client, LocalAuth } = require('whatsapp-web.js')
const qrcode = require('qrcode-terminal')
const express = require('express')
const path = require('path')
const axios = require('axios')

// Inst√¢ncia do cliente WhatsApp com autentica√ß√£o local
const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  }
})

client.on('qr', qr => qrcode.generate(qr, { small: true }))
client.on('ready', () => console.log('‚úÖ WhatsApp Web conectado!'))
client.on('authenticated', () => console.log('üîë Autenticado com sucesso!'))
client.on('auth_failure', msg =>
  console.error('‚ùå Falha na autentica√ß√£o:', msg)
)

// Vari√°veis de controle
let conversationState = {}
let botActive = true // Estado do bot
const allowedNumber = '5511941093985@c.us' // N√∫mero autorizado
let attendantActive = {} // Inicializa o objeto
let inactivityTimers = {} // Armazena os temporizadores de inatividade

// Fun√ß√£o para enviar o menu principal
function sendMainMenu(chatId) {
  const options =
    'üåø Bem-vindo √† Ch√°cara da Paz! üåûüçÉ\nComo posso ajudar hoje?\n\n1Ô∏è‚É£ Informa√ß√µes sobre a ch√°cara\n3Ô∏è‚É£ Pre√ßos e pacotes\n4Ô∏è‚É£ Outras d√∫vidas'
  client.sendMessage(chatId, options)
}

// Fun√ß√£o para enviar o menu de pacotes e pre√ßos
function sendPriceOptions(chatId) {
  const options =
    'üí∞ Tabela de Pre√ßos:\n1Ô∏è‚É£ Di√°rias de Dezembro a Fevereiro\n2Ô∏è‚É£ Di√°rias de Mar√ßo a Novembro\n3Ô∏è‚É£ Feriados\n4Ô∏è‚É£ Pacote Carnaval\n5Ô∏è‚É£ Pacote Ano Novo\n6Ô∏è‚É£ üîô Voltar ao menu principal'
  client.sendMessage(chatId, options)
}

// Fun√ß√£o para enviar dados para o portal
function sendToPortal(data) {
  console.log('üì° Enviando dados para o portal:', data)
  axios
    .post('http://localhost:3000/api/requests', data)
    .then(response => console.log('‚úÖ Dados enviados:', response.data))
    .catch(error => console.error('‚ùå Erro ao enviar:', error))
}

// Fun√ß√£o para iniciar ou reiniciar o temporizador de inatividade
function resetInactivityTimer(chatId) {
  if (inactivityTimers[chatId]) {
    clearTimeout(inactivityTimers[chatId])
  }
  inactivityTimers[chatId] = setTimeout(async () => {
    await client.sendMessage(
      chatId,
      'Voc√™ ainda est√° a√≠? Precisa de mais alguma coisa?'
    )
    await client.sendMessage(
      chatId,
      'O atendimento foi encerrado. Se precisar de mais alguma coisa, estou aqui para ajudar!'
    )
    sendMainMenu(chatId)
  }, 300000) // 5 minutos de inatividade
}

// Fun√ß√£o para simular digita√ß√£o
async function simulateTyping(chatId, messages, isMenu = false) {
  const chat = await client.getChatById(chatId)
  if (!Array.isArray(messages)) messages = [messages]
  for (const message of messages) {
    await chat.sendStateTyping()
    await new Promise(resolve => setTimeout(resolve, isMenu ? 50000 : 3000))
    await client.sendMessage(chatId, message)
    await chat.clearState()
    await new Promise(resolve => setTimeout(resolve, isMenu ? 20000 : 3000))
  }
}
// Evento para responder automaticamente √†s mensagens recebidas
client.on('message', async message => {
  const chatId = message.from

  console.log(`üì© Mensagem recebida de ${chatId}: ${message.body}`)

  // Verifica se o bot est√° ativo e se ningu√©m est√° digitando
  if (!botActive || attendantActive[chatId]) {
    console.log(`Bot est√° pausado para ${chatId}.`)
    return
  }

  // Comandos para ativar e desativar o bot
  if (message.body.toLowerCase() === 'ativar bot') {
    botActive = true
    await simulateTyping(chatId, 'ü§ñ Bot ativado.')
    return
  } else if (message.body.toLowerCase() === 'desativar bot') {
    botActive = false
    await simulateTyping(chatId, 'ü§ñ Bot desativado.')
    return
  }

  // Verifica se o n√∫mero √© autorizado
  //if (chatId !== allowedNumber) {
  //console.log(`N√∫mero n√£o autorizado: ${chatId}`)
  // return
  //}

  // Reinicia o temporizador de inatividade
  resetInactivityTimer(chatId)

  if (!conversationState[chatId]) {
    conversationState[chatId] = 'initial'
    sendMainMenu(chatId)
  } else {
    handleUserResponse(chatId, message.body)
  }
})

// L√≥gica do fluxo de conversa
function handleUserResponse(chatId, userMessage) {
  switch (conversationState[chatId]) {
    case 'initial':
      handleInitialResponse(chatId, userMessage)
      break
    case 'info':
      handleInfoResponse(chatId, userMessage)
      break
    case 'info_lazer':
      handleInfoLazerResponse(chatId, userMessage)
      break
    case 'prices':
      handlePricesResponse(chatId, userMessage)
      break
    case 'other':
      handleOtherResponse(chatId)
      break
    case 'price_options':
      handlePriceOptionsResponse(chatId, userMessage)
      break
    case 'date':
      handleDateResponse(chatId, userMessage)
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
  }
}

function handleInitialResponse(chatId, userMessage) {
  switch (userMessage.trim()) {
    case '1':
      conversationState[chatId] = 'info'
      simulateTyping(
        chatId,
        'üè° A Ch√°cara da Paz conta com 3 quartos e acomoda√ß√µes para 20 pessoas. Quer saber mais sobre a √°rea de lazer?\n1Ô∏è‚É£ Sim\n2Ô∏è‚É£ N√£o'
      )
      break
    case '3':
      conversationState[chatId] = 'prices'
      sendPriceOptions(chatId)
      break
    case '4':
      conversationState[chatId] = 'other'
      simulateTyping(
        chatId,
        '‚ùì Digite sua d√∫vida, e nossa equipe responder√° em breve!'
      )
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
  }
}

function handleInfoResponse(chatId, userMessage) {
  switch (userMessage.trim()) {
    case '1':
      simulateTyping(
        chatId,
        'Contamos com 2 mesas de pebolim, 1 mesa de ping pong, 1 mesa de sinuca, um amplo campo de futebol, playground para crian√ßas, piscina aquecida, espa√ßo gourmet com fog√£o a lenha, 2 freezers para bebidas, e duas churrasqueiras. Tamb√©m temos um espa√ßo para festas com ilumina√ß√£o personalizada e sistema de som controlado pela ALEXA. E n√£o podemos esquecer do espa√ßo para fazer fogueira ao ar livre! ü™µüî•'
      )
      conversationState[chatId] = 'info_lazer'
      simulateTyping(
        chatId,
        'Gostaria de saber mais sobre nossos pacotes de pre√ßos?\n1Ô∏è‚É£ Sim\n2Ô∏è‚É£ N√£o'
      )
      break
    case '2':
      simulateTyping(
        chatId,
        'Obrigado! Se precisar de mais informa√ß√µes, estamos √† disposi√ß√£o.'
      )
      conversationState[chatId] = 'initial'
      sendMainMenu(chatId)
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
  }
}

function handleInfoLazerResponse(chatId, userMessage) {
  switch (userMessage.trim()) {
    case '1':
      conversationState[chatId] = 'prices'
      sendPriceOptions(chatId)
      break
    case '2':
      conversationState[chatId] = 'initial'
      sendMainMenu(chatId)
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
  }
}

function handlePricesResponse(chatId, userMessage) {
  switch (userMessage.trim()) {
    case '1':
      simulateTyping(
        chatId,
        'üèñ  Final de semana R$ 2.200\n- Check in na sexta √†s 18:00\n- Check out no domingo √†s 18:00\n\n1 Di√°ria R$ 1.200\n- Check in √†s 08:00\n- Check out √†s 18:00'
      )
      break
    case '2':
      simulateTyping(
        chatId,
        '‚òÄÔ∏è Valores das di√°rias de Mar√ßo a Novembro\nFinal de semana R$ 1.600\n- Check in na sexta √†s 18:00\n- Check out no domingo √†s 18:00\n\n1 Di√°ria R$ 900\n- Check in √†s 08:00\n- Check out √†s 18:00'
      )
      break
    case '3':
      simulateTyping(
        chatId,
        '‚öΩÔ∏è Valores das di√°rias em Feriados\nFinal de semana R$ 1.800\n- Check in na sexta √†s 18:00\n- Check out no domingo √†s 18:00\n\n1 Di√°ria R$ 1.000\n- Check in √†s 08:00\n- Check out √†s 18:00'
      )
      break
    case '4':
      simulateTyping(
        chatId,
        'üéâ Valor do pacote Carnaval\nReservamos no m√≠nimo 3 di√°rias\nValor R$ 3.800\n- Check in √†s 08:00\n- Check out √†s 18:00'
      )
      break
    case '5':
      simulateTyping(
        chatId,
        'üéä Valor pacote Ano Novo 2025\nReservamos no m√≠nimo 4 di√°rias\nValor R$ 8.200\n- Check in √†s 08:00\n- Check out √†s 18:00'
      )
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
      sendPriceOptions(chatId)
      return
  }
  conversationState[chatId] = 'price_options'
  simulateTyping(
    chatId,
    'O que voc√™ gostaria de fazer agora?\n1Ô∏è‚É£ Verificar disponibilidade de data\n2Ô∏è‚É£ Voltar ao menu principal'
  )
}

function handlePriceOptionsResponse(chatId, userMessage) {
  switch (userMessage.trim()) {
    case '1':
      conversationState[chatId] = 'date'
      simulateTyping(chatId, 'üìÖ Informe a data desejada (dd/mm/yyyy)')
      break
    case '2':
      conversationState[chatId] = 'initial'
      sendMainMenu(chatId)
      break
    default:
      simulateTyping(
        chatId,
        '‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes numeradas.'
      )
  }
}

function handleDateResponse(chatId, userMessage) {
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(userMessage.trim())) {
    simulateTyping(
      chatId,
      `üìÜ Vamos verificar a disponibilidade para ${userMessage}. Aguarde nosso retorno.`
    )
    sendToPortal({ chatId, date: userMessage })
    // Pausa o bot ap√≥s receber a data
    botActive = false
  } else {
    simulateTyping(chatId, '‚ö†Ô∏è Formato de data inv√°lido. Use dd/mm/yyyy')
  }
}

function handleOtherResponse(chatId) {
  simulateTyping(chatId, 'üì® Obrigado! Nossa equipe responder√° em breve.')
  // Pausa o bot ap√≥s receber a d√∫vida
  botActive = false
}

// Evento para detectar quando um atendente assume a conversa
client.on('typing', chat => {
  const chatId = chat.id._serialized
  console.log(`Evento 'typing' disparado para ${chatId}`) // Verifica√ß√£o adicional
  if (chatId) {
    attendantActive[chatId] = true
    console.log(`Atendente come√ßou a digitar em ${chatId}. Bot pausado.`)
  }
})

client.on('message_ack', (msg, ack) => {
  const chatId = msg.from
  if (ack === 3 && chatId === allowedNumber) {
    attendantActive[chatId] = true
    console.log(`Mensagem lida em ${chatId}. Bot pausado.`)
  }
})

// Inicializa o cliente do WhatsApp Web
client.initialize()

// Configura√ß√£o do servidor Express.js
const app = express()
const port = 3000

app.use(express.json())

let requests = []

// Endpoint para receber dados do WhatsApp
app.post('/api/requests', (req, res) => {
  const request = req.body
  requests.push(request)
  res.status(201).send('Solicita√ß√£o recebida')
})

// Endpoint para listar todas as solicita√ß√µes
app.get('/api/requests', (req, res) => {
  res.json(requests)
})

// Rota para servir o arquivo HTML
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'))
})

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`)
})
